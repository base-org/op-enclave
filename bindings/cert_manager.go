// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ICertManagerVerifiedCert is an auto generated low-level Go binding around an user-defined struct.
type ICertManagerVerifiedCert struct {
	Ca          bool
	NotAfter    uint64
	MaxPathLen  int64
	SubjectHash [32]byte
	PubKey      []byte
}

// CertManagerMetaData contains all meta data concerning the CertManager contract.
var CertManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"BASIC_CONSTRAINTS_OID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CERT_ALGO_OID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"EC_PUB_KEY_OID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"KEY_USAGE_OID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROOT_CA_CERT_HASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROOT_CA_CERT_MAX_PATH_LEN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"int64\",\"internalType\":\"int64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROOT_CA_CERT_NOT_AFTER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROOT_CA_CERT_PUB_KEY\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROOT_CA_CERT_SUBJECT_HASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"SECP_384_R1_OID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verified\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verifyCert\",\"inputs\":[{\"name\":\"cert\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"ca\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"parentCertHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structICertManager.VerifiedCert\",\"components\":[{\"name\":\"ca\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"notAfter\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"maxPathLen\",\"type\":\"int64\",\"internalType\":\"int64\"},{\"name\":\"subjectHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"pubKey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifyCertBundle\",\"inputs\":[{\"name\":\"certificate\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"cabundle\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structICertManager.VerifiedCert\",\"components\":[{\"name\":\"ca\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"notAfter\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"maxPathLen\",\"type\":\"int64\",\"internalType\":\"int64\"},{\"name\":\"subjectHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"pubKey\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"nonpayable\"}]",
	Bin: "",
}

// CertManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use CertManagerMetaData.ABI instead.
var CertManagerABI = CertManagerMetaData.ABI

// CertManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CertManagerMetaData.Bin instead.
var CertManagerBin = CertManagerMetaData.Bin

// DeployCertManager deploys a new Ethereum contract, binding an instance of CertManager to it.
func DeployCertManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CertManager, error) {
	parsed, err := CertManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CertManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CertManager{CertManagerCaller: CertManagerCaller{contract: contract}, CertManagerTransactor: CertManagerTransactor{contract: contract}, CertManagerFilterer: CertManagerFilterer{contract: contract}}, nil
}

// CertManager is an auto generated Go binding around an Ethereum contract.
type CertManager struct {
	CertManagerCaller     // Read-only binding to the contract
	CertManagerTransactor // Write-only binding to the contract
	CertManagerFilterer   // Log filterer for contract events
}

// CertManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type CertManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CertManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CertManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CertManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CertManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CertManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CertManagerSession struct {
	Contract     *CertManager      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CertManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CertManagerCallerSession struct {
	Contract *CertManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// CertManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CertManagerTransactorSession struct {
	Contract     *CertManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// CertManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type CertManagerRaw struct {
	Contract *CertManager // Generic contract binding to access the raw methods on
}

// CertManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CertManagerCallerRaw struct {
	Contract *CertManagerCaller // Generic read-only contract binding to access the raw methods on
}

// CertManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CertManagerTransactorRaw struct {
	Contract *CertManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCertManager creates a new instance of CertManager, bound to a specific deployed contract.
func NewCertManager(address common.Address, backend bind.ContractBackend) (*CertManager, error) {
	contract, err := bindCertManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CertManager{CertManagerCaller: CertManagerCaller{contract: contract}, CertManagerTransactor: CertManagerTransactor{contract: contract}, CertManagerFilterer: CertManagerFilterer{contract: contract}}, nil
}

// NewCertManagerCaller creates a new read-only instance of CertManager, bound to a specific deployed contract.
func NewCertManagerCaller(address common.Address, caller bind.ContractCaller) (*CertManagerCaller, error) {
	contract, err := bindCertManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CertManagerCaller{contract: contract}, nil
}

// NewCertManagerTransactor creates a new write-only instance of CertManager, bound to a specific deployed contract.
func NewCertManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*CertManagerTransactor, error) {
	contract, err := bindCertManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CertManagerTransactor{contract: contract}, nil
}

// NewCertManagerFilterer creates a new log filterer instance of CertManager, bound to a specific deployed contract.
func NewCertManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*CertManagerFilterer, error) {
	contract, err := bindCertManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CertManagerFilterer{contract: contract}, nil
}

// bindCertManager binds a generic wrapper to an already deployed contract.
func bindCertManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CertManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CertManager *CertManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CertManager.Contract.CertManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CertManager *CertManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CertManager.Contract.CertManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CertManager *CertManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CertManager.Contract.CertManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CertManager *CertManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CertManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CertManager *CertManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CertManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CertManager *CertManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CertManager.Contract.contract.Transact(opts, method, params...)
}

// BASICCONSTRAINTSOID is a free data retrieval call binding the contract method 0x4519a352.
//
// Solidity: function BASIC_CONSTRAINTS_OID() view returns(bytes32)
func (_CertManager *CertManagerCaller) BASICCONSTRAINTSOID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "BASIC_CONSTRAINTS_OID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BASICCONSTRAINTSOID is a free data retrieval call binding the contract method 0x4519a352.
//
// Solidity: function BASIC_CONSTRAINTS_OID() view returns(bytes32)
func (_CertManager *CertManagerSession) BASICCONSTRAINTSOID() ([32]byte, error) {
	return _CertManager.Contract.BASICCONSTRAINTSOID(&_CertManager.CallOpts)
}

// BASICCONSTRAINTSOID is a free data retrieval call binding the contract method 0x4519a352.
//
// Solidity: function BASIC_CONSTRAINTS_OID() view returns(bytes32)
func (_CertManager *CertManagerCallerSession) BASICCONSTRAINTSOID() ([32]byte, error) {
	return _CertManager.Contract.BASICCONSTRAINTSOID(&_CertManager.CallOpts)
}

// CERTALGOOID is a free data retrieval call binding the contract method 0xaf9bdbc2.
//
// Solidity: function CERT_ALGO_OID() view returns(bytes32)
func (_CertManager *CertManagerCaller) CERTALGOOID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "CERT_ALGO_OID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CERTALGOOID is a free data retrieval call binding the contract method 0xaf9bdbc2.
//
// Solidity: function CERT_ALGO_OID() view returns(bytes32)
func (_CertManager *CertManagerSession) CERTALGOOID() ([32]byte, error) {
	return _CertManager.Contract.CERTALGOOID(&_CertManager.CallOpts)
}

// CERTALGOOID is a free data retrieval call binding the contract method 0xaf9bdbc2.
//
// Solidity: function CERT_ALGO_OID() view returns(bytes32)
func (_CertManager *CertManagerCallerSession) CERTALGOOID() ([32]byte, error) {
	return _CertManager.Contract.CERTALGOOID(&_CertManager.CallOpts)
}

// ECPUBKEYOID is a free data retrieval call binding the contract method 0xf69a82fe.
//
// Solidity: function EC_PUB_KEY_OID() view returns(bytes32)
func (_CertManager *CertManagerCaller) ECPUBKEYOID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "EC_PUB_KEY_OID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ECPUBKEYOID is a free data retrieval call binding the contract method 0xf69a82fe.
//
// Solidity: function EC_PUB_KEY_OID() view returns(bytes32)
func (_CertManager *CertManagerSession) ECPUBKEYOID() ([32]byte, error) {
	return _CertManager.Contract.ECPUBKEYOID(&_CertManager.CallOpts)
}

// ECPUBKEYOID is a free data retrieval call binding the contract method 0xf69a82fe.
//
// Solidity: function EC_PUB_KEY_OID() view returns(bytes32)
func (_CertManager *CertManagerCallerSession) ECPUBKEYOID() ([32]byte, error) {
	return _CertManager.Contract.ECPUBKEYOID(&_CertManager.CallOpts)
}

// KEYUSAGEOID is a free data retrieval call binding the contract method 0xaeb255ea.
//
// Solidity: function KEY_USAGE_OID() view returns(bytes32)
func (_CertManager *CertManagerCaller) KEYUSAGEOID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "KEY_USAGE_OID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// KEYUSAGEOID is a free data retrieval call binding the contract method 0xaeb255ea.
//
// Solidity: function KEY_USAGE_OID() view returns(bytes32)
func (_CertManager *CertManagerSession) KEYUSAGEOID() ([32]byte, error) {
	return _CertManager.Contract.KEYUSAGEOID(&_CertManager.CallOpts)
}

// KEYUSAGEOID is a free data retrieval call binding the contract method 0xaeb255ea.
//
// Solidity: function KEY_USAGE_OID() view returns(bytes32)
func (_CertManager *CertManagerCallerSession) KEYUSAGEOID() ([32]byte, error) {
	return _CertManager.Contract.KEYUSAGEOID(&_CertManager.CallOpts)
}

// ROOTCACERTHASH is a free data retrieval call binding the contract method 0x8fb57b62.
//
// Solidity: function ROOT_CA_CERT_HASH() view returns(bytes32)
func (_CertManager *CertManagerCaller) ROOTCACERTHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "ROOT_CA_CERT_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROOTCACERTHASH is a free data retrieval call binding the contract method 0x8fb57b62.
//
// Solidity: function ROOT_CA_CERT_HASH() view returns(bytes32)
func (_CertManager *CertManagerSession) ROOTCACERTHASH() ([32]byte, error) {
	return _CertManager.Contract.ROOTCACERTHASH(&_CertManager.CallOpts)
}

// ROOTCACERTHASH is a free data retrieval call binding the contract method 0x8fb57b62.
//
// Solidity: function ROOT_CA_CERT_HASH() view returns(bytes32)
func (_CertManager *CertManagerCallerSession) ROOTCACERTHASH() ([32]byte, error) {
	return _CertManager.Contract.ROOTCACERTHASH(&_CertManager.CallOpts)
}

// ROOTCACERTMAXPATHLEN is a free data retrieval call binding the contract method 0x9ecc0050.
//
// Solidity: function ROOT_CA_CERT_MAX_PATH_LEN() view returns(int64)
func (_CertManager *CertManagerCaller) ROOTCACERTMAXPATHLEN(opts *bind.CallOpts) (int64, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "ROOT_CA_CERT_MAX_PATH_LEN")

	if err != nil {
		return *new(int64), err
	}

	out0 := *abi.ConvertType(out[0], new(int64)).(*int64)

	return out0, err

}

// ROOTCACERTMAXPATHLEN is a free data retrieval call binding the contract method 0x9ecc0050.
//
// Solidity: function ROOT_CA_CERT_MAX_PATH_LEN() view returns(int64)
func (_CertManager *CertManagerSession) ROOTCACERTMAXPATHLEN() (int64, error) {
	return _CertManager.Contract.ROOTCACERTMAXPATHLEN(&_CertManager.CallOpts)
}

// ROOTCACERTMAXPATHLEN is a free data retrieval call binding the contract method 0x9ecc0050.
//
// Solidity: function ROOT_CA_CERT_MAX_PATH_LEN() view returns(int64)
func (_CertManager *CertManagerCallerSession) ROOTCACERTMAXPATHLEN() (int64, error) {
	return _CertManager.Contract.ROOTCACERTMAXPATHLEN(&_CertManager.CallOpts)
}

// ROOTCACERTNOTAFTER is a free data retrieval call binding the contract method 0x58e3139e.
//
// Solidity: function ROOT_CA_CERT_NOT_AFTER() view returns(uint64)
func (_CertManager *CertManagerCaller) ROOTCACERTNOTAFTER(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "ROOT_CA_CERT_NOT_AFTER")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ROOTCACERTNOTAFTER is a free data retrieval call binding the contract method 0x58e3139e.
//
// Solidity: function ROOT_CA_CERT_NOT_AFTER() view returns(uint64)
func (_CertManager *CertManagerSession) ROOTCACERTNOTAFTER() (uint64, error) {
	return _CertManager.Contract.ROOTCACERTNOTAFTER(&_CertManager.CallOpts)
}

// ROOTCACERTNOTAFTER is a free data retrieval call binding the contract method 0x58e3139e.
//
// Solidity: function ROOT_CA_CERT_NOT_AFTER() view returns(uint64)
func (_CertManager *CertManagerCallerSession) ROOTCACERTNOTAFTER() (uint64, error) {
	return _CertManager.Contract.ROOTCACERTNOTAFTER(&_CertManager.CallOpts)
}

// ROOTCACERTPUBKEY is a free data retrieval call binding the contract method 0xab68988d.
//
// Solidity: function ROOT_CA_CERT_PUB_KEY() view returns(bytes)
func (_CertManager *CertManagerCaller) ROOTCACERTPUBKEY(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "ROOT_CA_CERT_PUB_KEY")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ROOTCACERTPUBKEY is a free data retrieval call binding the contract method 0xab68988d.
//
// Solidity: function ROOT_CA_CERT_PUB_KEY() view returns(bytes)
func (_CertManager *CertManagerSession) ROOTCACERTPUBKEY() ([]byte, error) {
	return _CertManager.Contract.ROOTCACERTPUBKEY(&_CertManager.CallOpts)
}

// ROOTCACERTPUBKEY is a free data retrieval call binding the contract method 0xab68988d.
//
// Solidity: function ROOT_CA_CERT_PUB_KEY() view returns(bytes)
func (_CertManager *CertManagerCallerSession) ROOTCACERTPUBKEY() ([]byte, error) {
	return _CertManager.Contract.ROOTCACERTPUBKEY(&_CertManager.CallOpts)
}

// ROOTCACERTSUBJECTHASH is a free data retrieval call binding the contract method 0x441b31df.
//
// Solidity: function ROOT_CA_CERT_SUBJECT_HASH() view returns(bytes32)
func (_CertManager *CertManagerCaller) ROOTCACERTSUBJECTHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "ROOT_CA_CERT_SUBJECT_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ROOTCACERTSUBJECTHASH is a free data retrieval call binding the contract method 0x441b31df.
//
// Solidity: function ROOT_CA_CERT_SUBJECT_HASH() view returns(bytes32)
func (_CertManager *CertManagerSession) ROOTCACERTSUBJECTHASH() ([32]byte, error) {
	return _CertManager.Contract.ROOTCACERTSUBJECTHASH(&_CertManager.CallOpts)
}

// ROOTCACERTSUBJECTHASH is a free data retrieval call binding the contract method 0x441b31df.
//
// Solidity: function ROOT_CA_CERT_SUBJECT_HASH() view returns(bytes32)
func (_CertManager *CertManagerCallerSession) ROOTCACERTSUBJECTHASH() ([32]byte, error) {
	return _CertManager.Contract.ROOTCACERTSUBJECTHASH(&_CertManager.CallOpts)
}

// SECP384R1OID is a free data retrieval call binding the contract method 0x5ab70904.
//
// Solidity: function SECP_384_R1_OID() view returns(bytes32)
func (_CertManager *CertManagerCaller) SECP384R1OID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "SECP_384_R1_OID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SECP384R1OID is a free data retrieval call binding the contract method 0x5ab70904.
//
// Solidity: function SECP_384_R1_OID() view returns(bytes32)
func (_CertManager *CertManagerSession) SECP384R1OID() ([32]byte, error) {
	return _CertManager.Contract.SECP384R1OID(&_CertManager.CallOpts)
}

// SECP384R1OID is a free data retrieval call binding the contract method 0x5ab70904.
//
// Solidity: function SECP_384_R1_OID() view returns(bytes32)
func (_CertManager *CertManagerCallerSession) SECP384R1OID() ([32]byte, error) {
	return _CertManager.Contract.SECP384R1OID(&_CertManager.CallOpts)
}

// Verified is a free data retrieval call binding the contract method 0xc59e43e5.
//
// Solidity: function verified(bytes32 ) view returns(bytes)
func (_CertManager *CertManagerCaller) Verified(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _CertManager.contract.Call(opts, &out, "verified", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Verified is a free data retrieval call binding the contract method 0xc59e43e5.
//
// Solidity: function verified(bytes32 ) view returns(bytes)
func (_CertManager *CertManagerSession) Verified(arg0 [32]byte) ([]byte, error) {
	return _CertManager.Contract.Verified(&_CertManager.CallOpts, arg0)
}

// Verified is a free data retrieval call binding the contract method 0xc59e43e5.
//
// Solidity: function verified(bytes32 ) view returns(bytes)
func (_CertManager *CertManagerCallerSession) Verified(arg0 [32]byte) ([]byte, error) {
	return _CertManager.Contract.Verified(&_CertManager.CallOpts, arg0)
}

// VerifyCert is a paid mutator transaction binding the contract method 0xdc28a38d.
//
// Solidity: function verifyCert(bytes cert, bool ca, bytes32 parentCertHash) returns((bool,uint64,int64,bytes32,bytes))
func (_CertManager *CertManagerTransactor) VerifyCert(opts *bind.TransactOpts, cert []byte, ca bool, parentCertHash [32]byte) (*types.Transaction, error) {
	return _CertManager.contract.Transact(opts, "verifyCert", cert, ca, parentCertHash)
}

// VerifyCert is a paid mutator transaction binding the contract method 0xdc28a38d.
//
// Solidity: function verifyCert(bytes cert, bool ca, bytes32 parentCertHash) returns((bool,uint64,int64,bytes32,bytes))
func (_CertManager *CertManagerSession) VerifyCert(cert []byte, ca bool, parentCertHash [32]byte) (*types.Transaction, error) {
	return _CertManager.Contract.VerifyCert(&_CertManager.TransactOpts, cert, ca, parentCertHash)
}

// VerifyCert is a paid mutator transaction binding the contract method 0xdc28a38d.
//
// Solidity: function verifyCert(bytes cert, bool ca, bytes32 parentCertHash) returns((bool,uint64,int64,bytes32,bytes))
func (_CertManager *CertManagerTransactorSession) VerifyCert(cert []byte, ca bool, parentCertHash [32]byte) (*types.Transaction, error) {
	return _CertManager.Contract.VerifyCert(&_CertManager.TransactOpts, cert, ca, parentCertHash)
}

// VerifyCertBundle is a paid mutator transaction binding the contract method 0x5b608e2a.
//
// Solidity: function verifyCertBundle(bytes certificate, bytes[] cabundle) returns((bool,uint64,int64,bytes32,bytes))
func (_CertManager *CertManagerTransactor) VerifyCertBundle(opts *bind.TransactOpts, certificate []byte, cabundle [][]byte) (*types.Transaction, error) {
	return _CertManager.contract.Transact(opts, "verifyCertBundle", certificate, cabundle)
}

// VerifyCertBundle is a paid mutator transaction binding the contract method 0x5b608e2a.
//
// Solidity: function verifyCertBundle(bytes certificate, bytes[] cabundle) returns((bool,uint64,int64,bytes32,bytes))
func (_CertManager *CertManagerSession) VerifyCertBundle(certificate []byte, cabundle [][]byte) (*types.Transaction, error) {
	return _CertManager.Contract.VerifyCertBundle(&_CertManager.TransactOpts, certificate, cabundle)
}

// VerifyCertBundle is a paid mutator transaction binding the contract method 0x5b608e2a.
//
// Solidity: function verifyCertBundle(bytes certificate, bytes[] cabundle) returns((bool,uint64,int64,bytes32,bytes))
func (_CertManager *CertManagerTransactorSession) VerifyCertBundle(certificate []byte, cabundle [][]byte) (*types.Transaction, error) {
	return _CertManager.Contract.VerifyCertBundle(&_CertManager.TransactOpts, certificate, cabundle)
}
